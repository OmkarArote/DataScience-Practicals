set.seed(1)
random_numbers=runif(10)
random_numbers
set.seed(1)
random_numbers=runif(10)
random_numbers
coin_tosses_1=ifelse(random_numbers>.5,'head','tail')
coin_tosses_1
set.seed(1)
random_numbers=runif(10)
random_numbers
coin_tosses_1=ifelse(random_numbers>.5,'head','tail')
coin_tosses_1
sum(coin_tosses_1=='tail')
sum(coin_tosses_1=='head')
set.seed(1)
random_numbers=runif(10)
random_numbers
coin_tosses_1=ifelse(random_numbers>.5,'head','tail')
coin_tosses_1
sum(coin_tosses_1=='tail')
sum(coin_tosses_1=='head')
set.seed(1)
random_numbers=runif(10)
random_numbers
coin_tosses_1=ifelse(random_numbers>.5,'head','tail')
coin_tosses_1
# Total numbers of Tails
sum(coin_tosses_1=='tail')
# Total numbers of Heads
sum(coin_tosses_1=='head')
set.seed(12)
random_numbers=runif(10)
random_numbers
coin_tosses_1=ifelse(random_numbers>.5,'head','tail')
coin_tosses_1
# Total numbers of Tails
sum(coin_tosses_1=='tail')
# Total numbers of Heads
sum(coin_tosses_1=='head')
set.seed(2)
random_numbers=runif(10)
random_numbers
coin_tosses_1=ifelse(random_numbers>.5,'head','tail')
coin_tosses_1
# Total numbers of Tails
sum(coin_tosses_1=='tail')
# Total numbers of Heads
sum(coin_tosses_1=='head')
set.seed(1)
random_numbers=runif(10)
random_numbers
coin_tosses_1=ifelse(random_numbers>.5,'head','tail')
coin_tosses_1
# Total numbers of Tails
sum(coin_tosses_1=='tail')
# Total numbers of Heads
sum(coin_tosses_1=='head')
set.seed(1)
random_numbers=runif(10)
random_numbers
coin_tosses_1=ifelse(random_numbers>.5,'head','tail')
coin_tosses_1
# Total numbers of Tails
sum(coin_tosses_1=='tail')
# Total numbers of Heads
sum(coin_tosses_1=='head')
set.seed(1)
(dice_result=rmultinom(n = 30,size = 1,prob = rep(1/6,6)))
sum(dice_result[6,]==1)
dice_vector=apply(dice_result,1,function(x){
sum(x==1)
})
dice_vector
names(dice_vector)=c("1s","2s","3s","4s","5s","6s")
set.seed(1)
(dice_result=rmultinom(n = 30,size = 1,prob = rep(1/6,6)))
sum(dice_result[6,]==1)
dice_vector=apply(dice_result,1,function(x){
sum(x==1)
})
dice_vector
names(dice_vector)=c("1s","2s","3s","4s","5s","6s")
dice_vector
set.seed(1)
(dice_result=rmultinom(n = 30,size = 1,prob = rep(1/6,6)))
sum(dice_result[6,]==1)
dice_vector=apply(dice_result,1,function(x){
sum(x==1)
})
dice_vector
names(dice_vector)=c("1s","2s","3s","4s","5s","6s")
dice_vector
set.seed(1)
(dice_result=rmultinom(n = 30,size = 1,prob = rep(1/6,6)))
sum(dice_result[6,]==1)
dice_vector=apply(dice_result,1,function(x){
sum(x==1)
})
dice_vector
names(dice_vector)=c("1s","2s","3s","4s","5s","6s")
dice_vector
heights=rnorm(1000,1.70,0.1)
heights
heights=rnorm(1000,1.70,0.1)
heights
plot(density(heights),main="simulating heights")
set.seed(1)
heights2=rnorm(1000,1.70,0.1)
heights2
heights=rnorm(1000,1.70,0.1)
heights
plot(density(heights),main="simulating heights")
set.seed(1)
heights2=rnorm(1000,1.70,0.1)
heights2
lines(density(heights2),col="red",lwd=2)
heights=rnorm(1000,1.70,0.1)
heights
plot(density(heights),main="simulating heights")
set.seed(1)
heights2=rnorm(1000,1.70,0.1)
heights2
lines(density(heights2),col="red",lwd=2)
pnorm(1.90,1,70,0.1)
1-pnorm(1.60,1.70,0.1)
heights=rnorm(1000,1.70,0.1)
View(heights)
# a
plot(density(heights),main="simulating heights")
# b
set.seed(1)
heights2=rnorm(1000,1.70,0.1)
View(heights2)
lines(density(heights2),col="red",lwd=2)
# c
pnorm(1.90,1,70,0.1)
# d
1-pnorm(1.60,1.70,0.1)
heights=rnorm(1000,1.70,0.1)
# a
plot(density(heights),main="simulating heights")
# b
set.seed(1)
heights2=rnorm(1000,1.70,0.1)
lines(density(heights2),col="red",lwd=2)
# c
pnorm(1.90,1,70,0.1)
# d
1-pnorm(1.60,1.70,0.1)
heights=rnorm(1000,1.70,0.1)
# a
plot(density(heights),main="simulating heights")
# b
set.seed(1)
heights2=rnorm(1000,1.70,0.1)
lines(density(heights2),col="red",lwd=2)
# c
pnorm(1.90,1,70,0.1)
# d
1-pnorm(1.60,1.70,0.1)
set.seed(1)
patients=rexp(rate = 1/50,n=30) #random no gneration in exp
patients
set.seed(1)
patients=rexp(rate = 1/50,n=30) #random no gneration in exp
patients
pexp(q=10,rate = 1/50)#probablty
qexp(.5,rate = 1/50) #quantile
set.seed(1)
patients=rexp(rate = 1/50,n=30) #random no gneration in exp
patients
pexp(q=10,rate = 1/50)#probablty
qexp(.5,rate = 1/50) #quantile
set.seed(1)
patients=rexp(rate = 1/50,n=30) #random no generation in exp
patients
pexp(q=10,rate = 1/50)#probablty
qexp(.5,rate = 1/50) #quantile
set.seed(1)
patients=rexp(rate = 1/50,n=30) #random no generation in exp
patients
pexp(q=10,rate = 1/50)#probablty
qexp(.5,rate = 1/50) #quantile
View(state.x77)
View(state.x77)
x=apply(state.x77,MARGIN = 2,min)
x
View(state.x77)
x=apply(state.x77,MARGIN = 2,min)
x
y=apply(state.x77,MARGIN = 2,max)
y
z=apply(state.x77,MARGIN = 2,which.max)
z
t=apply(state.x77,MARGIN = 2,summary)
t
x=matrix(rnorm((9)),3,3)
rowSums(x)
colSums(x)
rowMeans(x)
colMeans(x)
x1=apply(x,MARGIN = 1,max.col)
x1
#2
list1=list(observationA=c(1:5,7:3),observationB=matrix(1:6,nrow=2))
list1
x=lapply(list1,length)
x
x1=lapply(list1,sum)
x1
x2=lapply(list1,quantile)
x2
x3=lapply(list1,class)
x3
x4=lapply(list1,unique)
x4
unlist(lapply(list1,print))
#3
myfunc=function(x,y){
if(is.na(x))
{
return (FALSE)
}
if(x>y)
{
return (TRUE)
}
else
{
return (FALSE)
}}
View(airquality)
x1=sapply(airquality$Ozone,myfunc,y=23)
x1
x2=sum(sapply(airquality$Ozone,myfunc,y=23))
x2
#4
x=data.frame(state.x77)
x1=split(x,state.region)
x2=lapply(x1,head,3)
x2
#5
x=data.frame(state.x77)
t1=tapply(x$Frost,state.region,mean)
t1
t2=tapply(x$Frost,state.region,sd)
t2
# 1
x=apply(state.x77,MARGIN = 2,min)
x
y=apply(state.x77,MARGIN = 2,max)
y
z=apply(state.x77,MARGIN = 2,which.max)
z
t=apply(state.x77,MARGIN = 2,summary)
t
x=matrix(rnorm((9)),3,3)
rowSums(x)
colSums(x)
rowMeans(x)
colMeans(x)
x1=apply(x,MARGIN = 1,max.col)
x1
#2
list1=list(observationA=c(1:5,7:3),observationB=matrix(1:6,nrow=2))
list1
x=lapply(list1,length)
x
x1=lapply(list1,sum)
x1
x2=lapply(list1,quantile)
x2
x3=lapply(list1,class)
x3
x4=lapply(list1,unique)
x4
unlist(lapply(list1,print))
#2
list1=list(observationA=c(1:5,7:3),observationB=matrix(1:6,nrow=2))
list1
x=lapply(list1,length)
x
x1=lapply(list1,sum)
x1
x2=lapply(list1,quantile)
x2
x3=lapply(list1,class)
x3
x4=lapply(list1,unique)
x4
unlist(lapply(list1,print))
#2
list1=list(observationA=c(1:5,7:3),observationB=matrix(1:6,nrow=2))
list1
x=lapply(list1,length)
x
x1=lapply(list1,sum)
x1
x2=lapply(list1,quantile)
x2
x3=lapply(list1,class)
x3
x4=lapply(list1,unique)
x4
unlist(lapply(list1,print))
#2
list1=list(observationA=c(1:5,7:3),observationB=matrix(1:6,nrow=2))
list1
x=lapply(list1,length)
x
x1=lapply(list1,sum)
x1
x2=lapply(list1,quantile)
x2
x3=lapply(list1,class)
x3
x4=lapply(list1,unique)
x4
unlist(lapply(list1,print))
#3
myfunc=function(x,y){
if(is.na(x))
{
return (FALSE)
}
if(x>y)
{
return (TRUE)
}
else
{
return (FALSE)
}}
View(airquality)
x1=sapply(airquality$Ozone,myfunc,y=23)
x1
x2=sum(sapply(airquality$Ozone,myfunc,y=23))
x2
#3
myfunc=function(x,y){
if(is.na(x))
{
return (FALSE)
}
if(x>y)
{
return (TRUE)
}
else
{
return (FALSE)
}
}
x1=sapply(airquality$Ozone,myfunc,y=23)
x1
x2=sum(sapply(airquality$Ozone,myfunc,y=23))
x2
#3
myfunc=function(x,y){
if(is.na(x))
{
return (FALSE)
}
if(x>y)
{
return (TRUE)
}
else
{
return (FALSE)
}
}
x1=sapply(airquality$Ozone,myfunc,y=23)
x1
x2=sum(sapply(airquality$Ozone,myfunc,y=23))
x2
#4
x=data.frame(state.x77)
x1=split(x,state.region)
x2=lapply(x1,head,3)
x2
#4
x=data.frame(state.x77)
x1=split(x,state.region)
x2=lapply(x1,head,3)
x2
#5
x=data.frame(state.x77)
t1=tapply(x$Frost,state.region,mean)
t1
t2=tapply(x$Frost,state.region,sd)
t2
#5
x=data.frame(state.x77)
t1=tapply(x$Frost,state.region,mean)
t1
t2=tapply(x$Frost,state.region,sd)
t2
setwd("D:/studies/MSC_DS/DataScience-Practicals/SEM1/DS1/P8")
income.data=read.csv("Data/income.data.csv")
View(income.data)
incomelm=lm(formula = happiness~income,income.data)
summary(incomelm)
install.packages("ggpubr")
install.packages("ggplot2")
library(ggplot2)
library(ggpubr)
income.data=read.csv("Data/income.data.csv")
View(income.data)
incomelm=lm(formula = happiness~income,income.data)
summary(incomelm)
income.graph=ggplot(income.data,aes(x=income,y=happiness ))+geom_point()
income.graph
income.graph=income.graph+geom_smooth(method = lm,col="black")
income.graph=income.graph+stat_regline_equation(label.x = 3,label.y = 4)
income.graph+theme_bw()+labs(title="reported happiness as a function of income",x="income(x$10,000)", y="happiness score (0 to 10)")
income.data=read.csv("Data/income.data.csv")
View(income.data)
incomelm=lm(formula = happiness~income,income.data)
summary(incomelm)
income.graph=ggplot(income.data,aes(x=income,y=happiness ))+geom_point()
income.graph
library(ggplot2)
library(ggpubr)
income.data=read.csv("Data/income.data.csv")
incomelm=lm(formula = happiness~income,income.data)
summary(incomelm)
income.graph=ggplot(income.data,aes(x=income,y=happiness ))+geom_point()
income.graph
library(ggplot2)
library(ggpubr)
income.data=read.csv("Data/income.data.csv")
incomelm=lm(formula = happiness~income,income.data)
summary(incomelm)
income.graph=ggplot(income.data,aes(x=income,y=happiness ))+geom_point()
income.graph
income.graph
income.graph=income.graph+geom_smooth(method = lm,col="black")
income.graph=income.graph+stat_regline_equation(label.x = 3,label.y = 4)
income.graph+theme_bw()+labs(title="reported happiness as a function of income",x="income(x$10,000)", y="happiness score (0 to 10)")
BP= read.csv("Data/BP.csv")
names(BP)=c("age","SBP")
head(BP)
#creating a dataset for predicting values
p=as.data.frame(20)
names(p)="age"
p
model=lm(SBP~age,data=BP)
summary(model)
predict(model,newdata=p)
bp.graph=ggplot(BP,aes(x=age,y=SBP))+geom_point()+xlim(20,100)
bp.graph
BP= read.csv("Data/BP.csv")
names(BP)=c("age","SBP")
head(BP)
#creating a dataset for predicting values
p=as.data.frame(20)
names(p)="age"
p
BP= read.csv("Data/BP.csv")
names(BP)=c("age","SBP")
head(BP)
#creating a dataset for predicting values
p=as.data.frame(20)
names(p)="age"
p
model=lm(SBP~age,data=BP)
summary(model)
predict(model,newdata=p)
bp.graph=ggplot(BP,aes(x=age,y=SBP))+geom_point()+xlim(20,100)
bp.graph
bp.graph=bp.graph+geom_smooth(method = "lm",col="black")
bp.graph=bp.graph+stat_regline_equation(label.x = 20,label.y = 160)
bp.graph+theme_bw()+labs(title="reported sbp as a function of age",x="age(in years)",y="systolic BP")
